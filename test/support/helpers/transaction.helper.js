'use strict'

const { TransactionModel } = require('../../../app/models')
const { RulesServiceTranslator, TransactionTranslator } = require('../../../app/translators')

const GeneralHelper = require('./general.helper')
const LicenceHelper = require('./licence.helper')

const { presroc: requestFixtures } = require('../fixtures/create_transaction')
const { presroc: chargeFixtures } = require('../fixtures/calculate_charge')

class TransactionHelper {
  /**
   * Create a transaction. If a overrides does not specify licenceId and invoiceId then a new licence will be created
   * (which in turn will create a new invoice).
   *
   * @param {string} billRunId Id of an actual bill run. We have a foreign key constraint which forces this requirement
   * @param {object} [overrides] JSON object of values which will override those generated by the helper. The primary
   *  source for the default values are the 'simple' request and 'rules service' fixtures. When specifying your
   *  overrides use the database names, for example, `lineAttr1` not `licenceNumber`
   *
   * @returns {module:TransactionModel} The newly created instance of `TransactionModel`.
   */
  static async addTransaction (billRunId, overrides = {}) {
    return TransactionModel.query()
      .insert({
        ...this._defaultSimpleTransaction(billRunId),
        ...this._defaultSimpleCharge(),
        ...await this._licenceAndInvoice(billRunId, overrides),
        ...overrides
      })
      .returning('*')
  }

  static _defaultSimpleTransaction (billRunId) {
    return new TransactionTranslator({
      billRunId,
      ...requestFixtures.simple,
      regimeId: GeneralHelper.uuid4(),
      authorisedSystemId: GeneralHelper.uuid4()
    })
  }

  static _defaultSimpleCharge () {
    return new RulesServiceTranslator({
      ...chargeFixtures.simple.rulesService
    })
  }

  /**
   * Returns licence and invoice ids. If addTransaction has been called with licenceId and invoiceId in overrides then
   * these values will be returned. Otherwise, a new licence will be created which in turn will create a new invoice,
   * and their ids will be returned.
   */
  static async _licenceAndInvoice (billRunId, overrides) {
    const licence = overrides.licenceId
      ? overrides.licenceId
      : await LicenceHelper.addLicence(billRunId, 'LICENCE', null, requestFixtures.simple.customerReference, 2019)

    const invoiceId = overrides.invoiceId
      ? overrides.invoiceId
      : licence.invoiceId

    return {
      licenceId: licence.id,
      invoiceId: invoiceId
    }
  }
}

module.exports = TransactionHelper
